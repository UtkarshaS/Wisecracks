akka {
  actor.provider = "akka.actor.LocalActorRefProvider"

  remote.netty.tcp.port = 0

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor.debug {
    # enable function of LoggingReceive, which is to log any received message at DEBUG level
    receive = on

    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
    autoreceive = on

    # enable DEBUG logging of actor lifecycle changes
    lifecycle = on

    # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
    fsm = on
  }
}

spray.routing {
  relaxed-header-parsing = on
}

spray.can {
  server {
    request-timeout = 10 s
    timeout-timeout = 3 s
  }
}

server {
  io {
    port = 8080
    ip = "0.0.0.0"
  }
}

producer {
  logging: true
  aws {
    access-key: "AKIAIMK2QMVMRPM2GEPQ"
    secret-key: "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"
  }
  stream {
    name: "sensor_data"
    wait_time: 60
  }
  buffer {
    BUFFER_RECORD_COUNT_LIMIT: 25
    RETRY_LIMIT: 3
    TIMER_LIMIT_IN_SECONDS: 30
  }
  active-polling {
    duration: 300
  }
}

validations{
  validPlatforms: []
  validTags: []
}
